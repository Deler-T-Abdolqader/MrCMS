@using System.Linq
@using MrCMS.Entities.Documents.Web
@using MrCMS.Helpers
@using MrCMS.Services
@using MrCMS.Services.Resources
@using MrCMS.Web.Apps.Core.Models.Search
@using MrCMS.Web.Apps.Core.Pages
@using MrCMS.Website
@using X.PagedList
@using X.PagedList.Mvc.Core
@model MrCMS.Web.Apps.Core.Pages.SearchPage
@inject IUniquePageService UniquePageService
@inject IGetLiveUrl GetLiveUrl
@{
    var searchModel = ViewData["webpageSearchQueryModel"] as WebpageSearchQuery;
    var results = ViewData["searchResults"] as IPagedList<Webpage>;
}
@Html.Editable(page => page.BodyContent, true)
<partial name="SearchQuery" model="searchModel"></partial>
<p></p>
@if (results != null && results.Any())
{
    <p>There are @results.TotalItemCount items matching your search @searchModel.Term</p>
    foreach (var result in results)
    {
        <div class="row">
            <div class="col-lg-12">
                <a href="@GetLiveUrl.GetUrlSegment(result,true)">
                    <h4 class="pt-3 margin-bottom-5">
                        @result.Name.StripHtml().TruncateString(200)
                    </h4>
                </a>
                @{
                    if (result is TextPage)
                    {
                        <p>@result.BodyContent.StripHtml().TruncateString(200)</p>
                    }
                }
                <p class="font-small">Last updated @result.CreatedOn.ToShortDateString()</p>
            </div>
        </div>
        <hr class="mt-0 mb-0" />
    }

    @Html.PagedListPager(results, page => UniquePageService.GetUrl<SearchPage>(new { page, searchModel.ParentId, searchModel.Term, searchModel.CreatedOnFrom, searchModel.CreatedOnTo, searchModel.Type }), MrCMSPagedListRenderOptions.Bootstrap4)
}
else
{
    <p>@Html.Resource("No results returned from query").</p>
}